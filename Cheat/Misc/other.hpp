#include <array>

Vector3 fat_target = Vector3::Zero();
namespace other {
	Vector3 m_manipulate = Vector3::Zero();
	void find_manipulate_angle() {
		Vector3 re_p = LocalPlayer::Entity()->transform()->position() + LocalPlayer::Entity()->transform()->up() * (PlayerEyes::EyeOffset().y + LocalPlayer::Entity()->eyes()->viewOffset().y);

		Vector3 choice = Vector3::Zero();

		if (utils::LineOfSight(re_p, reinterpret_cast<BasePlayer*>(vars::stor::closestPlayer)->GetBoneByID(head))) {
			m_manipulate = Vector3::Zero();
			return;
		}

		float desyncTime = (Time::realtimeSinceStartup() - LocalPlayer::Entity()->lastSentTickTime()) - 0.03125 * 3;
		float mm_max_eye = (0.1f + ((desyncTime + 2.f / 60.f + 0.125f) * 1.5f) * LocalPlayer::Entity()->MaxVelocity()) - 0.05f;
		float max_v_multicplier = 6.28f;
		float v_mm_max_eye = mm_max_eye / max_v_multicplier;

		auto right = LocalPlayer::Entity()->eyes()->MovementRight();
		auto forward = LocalPlayer::Entity()->eyes()->MovementForward();

		//std::array<Vector3, 819> bigfatvector_old = { Vector3(0.000000, -0.400000, 0.000000), Vector3(0.136808, -0.375877, 0.000000), Vector3(0.104801, -0.375877, 0.087939), Vector3(0.023756, -0.375877, 0.134730), Vector3(-0.068404, -0.375877, 0.118479), Vector3(-0.128558, -0.375877, 0.046791), Vector3(-0.128558, -0.375877, -0.046791), Vector3(-0.068404, -0.375877, -0.118479), Vector3(0.023757, -0.375877, -0.134730), Vector3(0.104801, -0.375877, -0.087939), Vector3(0.136808, -0.375877, 0.000000), Vector3(0.257115, -0.306418, 0.000000), Vector3(0.196962, -0.306418, 0.165270), Vector3(0.044648, -0.306418, 0.253209), Vector3(-0.128558, -0.306418, 0.222668), Vector3(-0.241609, -0.306418, 0.087938), Vector3(-0.241609, -0.306418, -0.087939), Vector3(-0.128558, -0.306418, -0.222668), Vector3(0.044648, -0.306418, -0.253209), Vector3(0.196962, -0.306418, -0.165270), Vector3(0.257115, -0.306418, 0.000000), Vector3(0.346410, -0.200000, 0.000000), Vector3(0.265366, -0.200000, 0.222668), Vector3(0.060153, -0.200000, 0.341147), Vector3(-0.173205, -0.200000, 0.300000), Vector3(-0.325519, -0.200000, 0.118479), Vector3(-0.325519, -0.200000, -0.118479), Vector3(-0.173205, -0.200000, -0.300000), Vector3(0.060154, -0.200000, -0.341147), Vector3(0.265366, -0.200000, -0.222668), Vector3(0.346410, -0.200000, 0.000000), Vector3(0.393923, -0.069459, 0.000000), Vector3(0.301763, -0.069459, 0.253209), Vector3(0.068404, -0.069459, 0.387939), Vector3(-0.196962, -0.069459, 0.341147), Vector3(-0.370167, -0.069459, 0.134730), Vector3(-0.370167, -0.069459, -0.134730), Vector3(-0.196962, -0.069459, -0.341147), Vector3(0.068404, -0.069459, -0.387938), Vector3(0.301763, -0.069459, -0.253209), Vector3(0.393923, -0.069459, 0.000000), Vector3(0.393923, 0.069459, 0.000000), Vector3(0.301763, 0.069459, 0.253209), Vector3(0.068404, 0.069459, 0.387939), Vector3(-0.196962, 0.069459, 0.341147), Vector3(-0.370167, 0.069459, 0.134730), Vector3(-0.370167, 0.069459, -0.134730), Vector3(-0.196962, 0.069459, -0.341147), Vector3(0.068404, 0.069459, -0.387938), Vector3(0.301763, 0.069459, -0.253209), Vector3(0.393923, 0.069459, 0.000000), Vector3(0.346410, 0.200000, 0.000000), Vector3(0.265366, 0.200000, 0.222668), Vector3(0.060153, 0.200000, 0.341147), Vector3(-0.173205, 0.200000, 0.300000), Vector3(-0.325519, 0.200000, 0.118479), Vector3(-0.325519, 0.200000, -0.118479), Vector3(-0.173205, 0.200000, -0.300000), Vector3(0.060154, 0.200000, -0.341147), Vector3(0.265366, 0.200000, -0.222668), Vector3(0.346410, 0.200000, 0.000000), Vector3(0.257115, 0.306418, 0.000000), Vector3(0.196962, 0.306418, 0.165270), Vector3(0.044648, 0.306418, 0.253209), Vector3(-0.128558, 0.306418, 0.222668), Vector3(-0.241609, 0.306418, 0.087938), Vector3(-0.241609, 0.306418, -0.087939), Vector3(-0.128557, 0.306418, -0.222668), Vector3(0.044648, 0.306418, -0.253209), Vector3(0.196962, 0.306418, -0.165270), Vector3(0.257115, 0.306418, 0.000000), Vector3(0.136808, 0.375877, 0.000000), Vector3(0.104801, 0.375877, 0.087938), Vector3(0.023756, 0.375877, 0.134730), Vector3(-0.068404, 0.375877, 0.118479), Vector3(-0.128557, 0.375877, 0.046791), Vector3(-0.128557, 0.375877, -0.046791), Vector3(-0.068404, 0.375877, -0.118479), Vector3(0.023757, 0.375877, -0.134730), Vector3(0.104801, 0.375877, -0.087938), Vector3(0.136808, 0.375877, 0.000000), Vector3(-0.000000, 0.400000, -0.000000), Vector3(-0.000000, 0.400000, -0.000000), Vector3(-0.000000, 0.400000, -0.000000), Vector3(0.000000, 0.400000, -0.000000), Vector3(0.000000, 0.400000, -0.000000), Vector3(0.000000, 0.400000, 0.000000), Vector3(0.000000, 0.400000, 0.000000), Vector3(-0.000000, 0.400000, 0.000000), Vector3(-0.000000, 0.400000, 0.000000), Vector3(-0.000000, 0.400000, -0.000000),
		//	Vector3(0.000000, -0.600000, 0.000000), Vector3(0.205212, -0.563816, 0.000000), Vector3(0.157202, -0.563816, 0.131908), Vector3(0.035635, -0.563816, 0.202094), Vector3(-0.102606, -0.563816, 0.177719), Vector3(-0.192836, -0.563816, 0.070187), Vector3(-0.192836, -0.563816, -0.070187), Vector3(-0.102606, -0.563816, -0.177719), Vector3(0.035635, -0.563816, -0.202094), Vector3(0.157202, -0.563816, -0.131908), Vector3(0.205212, -0.563816, 0.000000), Vector3(0.385673, -0.459627, 0.000000), Vector3(0.295442, -0.459627, 0.247906), Vector3(0.066971, -0.459627, 0.379813), Vector3(-0.192836, -0.459627, 0.334002), Vector3(-0.362414, -0.459627, 0.131908), Vector3(-0.362414, -0.459627, -0.131908), Vector3(-0.192836, -0.459627, -0.334002), Vector3(0.066972, -0.459627, -0.379813), Vector3(0.295442, -0.459627, -0.247905), Vector3(0.385673, -0.459627, 0.000000), Vector3(0.519615, -0.300000, 0.000000), Vector3(0.398048, -0.300000, 0.334002), Vector3(0.090230, -0.300000, 0.511721), Vector3(-0.259808, -0.300000, 0.450000), Vector3(-0.488279, -0.300000, 0.177719), Vector3(-0.488279, -0.300000, -0.177719), Vector3(-0.259808, -0.300000, -0.450000), Vector3(0.090230, -0.300000, -0.511721), Vector3(0.398048, -0.300000, -0.334002), Vector3(0.519615, -0.300000, 0.000000), Vector3(0.590885, -0.104189, 0.000000), Vector3(0.452644, -0.104189, 0.379813), Vector3(0.102606, -0.104189, 0.581908), Vector3(-0.295442, -0.104189, 0.511721), Vector3(-0.555250, -0.104189, 0.202094), Vector3(-0.555250, -0.104189, -0.202095), Vector3(-0.295442, -0.104189, -0.511721), Vector3(0.102606, -0.104189, -0.581908), Vector3(0.452644, -0.104189, -0.379813), Vector3(0.590885, -0.104189, 0.000000), Vector3(0.590885, 0.104189, 0.000000), Vector3(0.452644, 0.104189, 0.379813), Vector3(0.102606, 0.104189, 0.581908), Vector3(-0.295442, 0.104189, 0.511721), Vector3(-0.555250, 0.104189, 0.202094), Vector3(-0.555250, 0.104189, -0.202095), Vector3(-0.295442, 0.104189, -0.511721), Vector3(0.102606, 0.104189, -0.581908), Vector3(0.452644, 0.104189, -0.379813), Vector3(0.590885, 0.104189, 0.000000), Vector3(0.519615, 0.300000, 0.000000), Vector3(0.398048, 0.300000, 0.334002), Vector3(0.090230, 0.300000, 0.511721), Vector3(-0.259808, 0.300000, 0.450000), Vector3(-0.488279, 0.300000, 0.177719), Vector3(-0.488279, 0.300000, -0.177719), Vector3(-0.259808, 0.300000, -0.450000), Vector3(0.090230, 0.300000, -0.511721), Vector3(0.398048, 0.300000, -0.334002), Vector3(0.519615, 0.300000, 0.000000), Vector3(0.385672, 0.459627, 0.000000), Vector3(0.295442, 0.459627, 0.247906), Vector3(0.066971, 0.459627, 0.379813), Vector3(-0.192836, 0.459627, 0.334002), Vector3(-0.362414, 0.459627, 0.131908), Vector3(-0.362414, 0.459627, -0.131908), Vector3(-0.192836, 0.459627, -0.334002), Vector3(0.066971, 0.459627, -0.379813), Vector3(0.295442, 0.459627, -0.247905), Vector3(0.385672, 0.459627, 0.000000), Vector3(0.205212, 0.563816, 0.000000), Vector3(0.157202, 0.563816, 0.131908), Vector3(0.035635, 0.563816, 0.202094), Vector3(-0.102606, 0.563816, 0.177719), Vector3(-0.192836, 0.563816, 0.070187), Vector3(-0.192836, 0.563816, -0.070187), Vector3(-0.102606, 0.563816, -0.177719), Vector3(0.035635, 0.563816, -0.202094), Vector3(0.157202, 0.563816, -0.131908), Vector3(0.205212, 0.563816, 0.000000), Vector3(-0.000000, 0.600000, -0.000000), Vector3(-0.000000, 0.600000, -0.000000), Vector3(-0.000000, 0.600000, -0.000000), Vector3(0.000000, 0.600000, -0.000000), Vector3(0.000000, 0.600000, -0.000000), Vector3(0.000000, 0.600000, 0.000000), Vector3(0.000000, 0.600000, 0.000000), Vector3(-0.000000, 0.600000, 0.000000), Vector3(-0.000000, 0.600000, 0.000000), Vector3(-0.000000, 0.600000, -0.000000),
		//	Vector3(0.000000, -0.800000, 0.000000), Vector3(0.273616, -0.751754, 0.000000), Vector3(0.209602, -0.751754, 0.175877), Vector3(0.047513, -0.751754, 0.269459), Vector3(-0.136808, -0.751754, 0.236959), Vector3(-0.257115, -0.751754, 0.093582), Vector3(-0.257115, -0.751754, -0.093582), Vector3(-0.136808, -0.751754, -0.236959), Vector3(0.047513, -0.751754, -0.269459), Vector3(0.209602, -0.751754, -0.175877), Vector3(0.273616, -0.751754, 0.000000), Vector3(0.514230, -0.612836, 0.000000), Vector3(0.393923, -0.612836, 0.330541), Vector3(0.089295, -0.612836, 0.506418), Vector3(-0.257115, -0.612836, 0.445336), Vector3(-0.483218, -0.612836, 0.175877), Vector3(-0.483218, -0.612836, -0.175877), Vector3(-0.257115, -0.612836, -0.445336), Vector3(0.089295, -0.612836, -0.506418), Vector3(0.393923, -0.612836, -0.330541), Vector3(0.514230, -0.612836, 0.000000), Vector3(0.692820, -0.400000, 0.000000), Vector3(0.530731, -0.400000, 0.445336), Vector3(0.120307, -0.400000, 0.682295), Vector3(-0.346410, -0.400000, 0.600000), Vector3(-0.651038, -0.400000, 0.236958), Vector3(-0.651038, -0.400000, -0.236959), Vector3(-0.346410, -0.400000, -0.600000), Vector3(0.120307, -0.400000, -0.682295), Vector3(0.530731, -0.400000, -0.445336), Vector3(0.692820, -0.400000, 0.000000), Vector3(0.787846, -0.138919, 0.000000), Vector3(0.603525, -0.138919, 0.506418), Vector3(0.136808, -0.138919, 0.775877), Vector3(-0.393923, -0.138919, 0.682295), Vector3(-0.740333, -0.138919, 0.269459), Vector3(-0.740333, -0.138919, -0.269459), Vector3(-0.393923, -0.138919, -0.682295), Vector3(0.136808, -0.138919, -0.775877), Vector3(0.603525, -0.138919, -0.506418), Vector3(0.787846, -0.138919, 0.000000), Vector3(0.787846, 0.138919, 0.000000), Vector3(0.603525, 0.138919, 0.506418), Vector3(0.136808, 0.138919, 0.775877), Vector3(-0.393923, 0.138919, 0.682295), Vector3(-0.740333, 0.138919, 0.269459), Vector3(-0.740333, 0.138919, -0.269459), Vector3(-0.393923, 0.138919, -0.682295), Vector3(0.136808, 0.138919, -0.775877), Vector3(0.603525, 0.138919, -0.506418), Vector3(0.787846, 0.138919, 0.000000), Vector3(0.692820, 0.400000, 0.000000), Vector3(0.530731, 0.400000, 0.445336), Vector3(0.120307, 0.400000, 0.682295), Vector3(-0.346410, 0.400000, 0.600000), Vector3(-0.651038, 0.400000, 0.236958), Vector3(-0.651038, 0.400000, -0.236959), Vector3(-0.346410, 0.400000, -0.600000), Vector3(0.120307, 0.400000, -0.682295), Vector3(0.530731, 0.400000, -0.445336), Vector3(0.692820, 0.400000, 0.000000), Vector3(0.514230, 0.612836, 0.000000), Vector3(0.393923, 0.612836, 0.330541), Vector3(0.089295, 0.612836, 0.506418), Vector3(-0.257115, 0.612836, 0.445336), Vector3(-0.483218, 0.612836, 0.175877), Vector3(-0.483218, 0.612836, -0.175877), Vector3(-0.257115, 0.612836, -0.445336), Vector3(0.089295, 0.612836, -0.506418), Vector3(0.393923, 0.612836, -0.330541), Vector3(0.514230, 0.612836, 0.000000), Vector3(0.273616, 0.751754, 0.000000), Vector3(0.209602, 0.751754, 0.175877), Vector3(0.047513, 0.751754, 0.269459), Vector3(-0.136808, 0.751754, 0.236958), Vector3(-0.257115, 0.751754, 0.093582), Vector3(-0.257115, 0.751754, -0.093582), Vector3(-0.136808, 0.751754, -0.236958), Vector3(0.047513, 0.751754, -0.269459), Vector3(0.209602, 0.751754, -0.175877), Vector3(0.273616, 0.751754, 0.000000), Vector3(-0.000000, 0.800000, -0.000000), Vector3(-0.000000, 0.800000, -0.000000), Vector3(-0.000000, 0.800000, -0.000000), Vector3(0.000000, 0.800000, -0.000000), Vector3(0.000000, 0.800000, -0.000000), Vector3(0.000000, 0.800000, 0.000000), Vector3(0.000000, 0.800000, 0.000000), Vector3(-0.000000, 0.800000, 0.000000), Vector3(-0.000000, 0.800000, 0.000000), Vector3(-0.000000, 0.800000, -0.000000),
		//	Vector3(0.000000, -1.000000, 0.000000), Vector3(0.342020, -0.939693, 0.000000), Vector3(0.262003, -0.939693, 0.219846), Vector3(0.059391, -0.939693, 0.336824), Vector3(-0.171010, -0.939693, 0.296198), Vector3(-0.321394, -0.939693, 0.116978), Vector3(-0.321394, -0.939693, -0.116978), Vector3(-0.171010, -0.939693, -0.296198), Vector3(0.059391, -0.939693, -0.336824), Vector3(0.262003, -0.939693, -0.219846), Vector3(0.342020, -0.939693, 0.000000), Vector3(0.642788, -0.766044, 0.000000), Vector3(0.492404, -0.766044, 0.413176), Vector3(0.111619, -0.766044, 0.633022), Vector3(-0.321394, -0.766044, 0.556670), Vector3(-0.604023, -0.766044, 0.219846), Vector3(-0.604023, -0.766044, -0.219846), Vector3(-0.321394, -0.766044, -0.556670), Vector3(0.111619, -0.766044, -0.633022), Vector3(0.492404, -0.766044, -0.413176), Vector3(0.642788, -0.766044, 0.000000), Vector3(0.866025, -0.500000, 0.000000), Vector3(0.663414, -0.500000, 0.556670), Vector3(0.150384, -0.500000, 0.852869), Vector3(-0.433013, -0.500000, 0.750000), Vector3(-0.813798, -0.500000, 0.296198), Vector3(-0.813798, -0.500000, -0.296198), Vector3(-0.433013, -0.500000, -0.750000), Vector3(0.150384, -0.500000, -0.852868), Vector3(0.663414, -0.500000, -0.556670), Vector3(0.866025, -0.500000, 0.000000), Vector3(0.984808, -0.173648, 0.000000), Vector3(0.754407, -0.173648, 0.633022), Vector3(0.171010, -0.173648, 0.969846), Vector3(-0.492404, -0.173648, 0.852869), Vector3(-0.925417, -0.173648, 0.336824), Vector3(-0.925417, -0.173648, -0.336824), Vector3(-0.492404, -0.173648, -0.852869), Vector3(0.171011, -0.173648, -0.969846), Vector3(0.754407, -0.173648, -0.633022), Vector3(0.984808, -0.173648, 0.000000), Vector3(0.984808, 0.173648, 0.000000), Vector3(0.754407, 0.173648, 0.633022), Vector3(0.171010, 0.173648, 0.969846), Vector3(-0.492404, 0.173648, 0.852868), Vector3(-0.925417, 0.173648, 0.336824), Vector3(-0.925416, 0.173648, -0.336824), Vector3(-0.492404, 0.173648, -0.852869), Vector3(0.171011, 0.173648, -0.969846), Vector3(0.754407, 0.173648, -0.633022), Vector3(0.984808, 0.173648, 0.000000), Vector3(0.866025, 0.500000, 0.000000), Vector3(0.663414, 0.500000, 0.556670), Vector3(0.150384, 0.500000, 0.852869), Vector3(-0.433013, 0.500000, 0.750000), Vector3(-0.813798, 0.500000, 0.296198), Vector3(-0.813798, 0.500000, -0.296198), Vector3(-0.433013, 0.500000, -0.750000), Vector3(0.150384, 0.500000, -0.852868), Vector3(0.663414, 0.500000, -0.556670), Vector3(0.866025, 0.500000, 0.000000), Vector3(0.642787, 0.766045, 0.000000), Vector3(0.492404, 0.766045, 0.413176), Vector3(0.111619, 0.766045, 0.633022), Vector3(-0.321394, 0.766045, 0.556670), Vector3(-0.604023, 0.766045, 0.219846), Vector3(-0.604023, 0.766045, -0.219846), Vector3(-0.321394, 0.766045, -0.556670), Vector3(0.111619, 0.766045, -0.633022), Vector3(0.492404, 0.766045, -0.413176), Vector3(0.642787, 0.766045, 0.000000), Vector3(0.342020, 0.939693, 0.000000), Vector3(0.262003, 0.939693, 0.219846), Vector3(0.059391, 0.939693, 0.336824), Vector3(-0.171010, 0.939693, 0.296198), Vector3(-0.321394, 0.939693, 0.116978), Vector3(-0.321394, 0.939693, -0.116978), Vector3(-0.171010, 0.939693, -0.296198), Vector3(0.059391, 0.939693, -0.336824), Vector3(0.262003, 0.939693, -0.219846), Vector3(0.342020, 0.939693, 0.000000), Vector3(-0.000000, 1.000000, -0.000000), Vector3(-0.000000, 1.000000, -0.000000), Vector3(-0.000000, 1.000000, -0.000000), Vector3(0.000000, 1.000000, -0.000000), Vector3(0.000000, 1.000000, -0.000000), Vector3(0.000000, 1.000000, 0.000000), Vector3(0.000000, 1.000000, 0.000000), Vector3(-0.000000, 1.000000, 0.000000), Vector3(-0.000000, 1.000000, 0.000000), Vector3(-0.000000, 1.000000, -0.000000),
		//	Vector3(0.000000, -1.200000, 0.000000), Vector3(0.410424, -1.127631, 0.000000), Vector3(0.314403, -1.127631, 0.263816), Vector3(0.071269, -1.127631, 0.404189), Vector3(-0.205212, -1.127631, 0.355438), Vector3(-0.385673, -1.127631, 0.140373), Vector3(-0.385673, -1.127631, -0.140373), Vector3(-0.205212, -1.127631, -0.355438), Vector3(0.071270, -1.127631, -0.404189), Vector3(0.314403, -1.127631, -0.263816), Vector3(0.410424, -1.127631, 0.000000), Vector3(0.771345, -0.919253, 0.000000), Vector3(0.590885, -0.919253, 0.495811), Vector3(0.133943, -0.919253, 0.759627), Vector3(-0.385673, -0.919253, 0.668005), Vector3(-0.724827, -0.919253, 0.263815), Vector3(-0.724827, -0.919253, -0.263816), Vector3(-0.385673, -0.919253, -0.668005), Vector3(0.133943, -0.919253, -0.759627), Vector3(0.590885, -0.919253, -0.495811), Vector3(0.771345, -0.919253, 0.000000), Vector3(1.039231, -0.600000, 0.000000), Vector3(0.796097, -0.600000, 0.668005), Vector3(0.180460, -0.600000, 1.023442), Vector3(-0.519615, -0.600000, 0.900000), Vector3(-0.976557, -0.600000, 0.355438), Vector3(-0.976557, -0.600000, -0.355438), Vector3(-0.519615, -0.600000, -0.900000), Vector3(0.180461, -0.600000, -1.023442), Vector3(0.796097, -0.600000, -0.668004), Vector3(1.039231, -0.600000, 0.000000), Vector3(1.181769, -0.208378, 0.000000), Vector3(0.905288, -0.208378, 0.759627), Vector3(0.205212, -0.208378, 1.163816), Vector3(-0.590885, -0.208378, 1.023442), Vector3(-1.110500, -0.208378, 0.404189), Vector3(-1.110500, -0.208378, -0.404189), Vector3(-0.590885, -0.208378, -1.023442), Vector3(0.205213, -0.208378, -1.163815), Vector3(0.905288, -0.208378, -0.759626), Vector3(1.181769, -0.208378, 0.000000), Vector3(1.181769, 0.208378, 0.000000), Vector3(0.905288, 0.208378, 0.759627), Vector3(0.205212, 0.208378, 1.163816), Vector3(-0.590885, 0.208378, 1.023442), Vector3(-1.110500, 0.208378, 0.404189), Vector3(-1.110500, 0.208378, -0.404189), Vector3(-0.590885, 0.208378, -1.023442), Vector3(0.205213, 0.208378, -1.163815), Vector3(0.905288, 0.208378, -0.759626), Vector3(1.181769, 0.208378, 0.000000), Vector3(1.039230, 0.600000, 0.000000), Vector3(0.796097, 0.600000, 0.668005), Vector3(0.180460, 0.600000, 1.023442), Vector3(-0.519615, 0.600000, 0.900000), Vector3(-0.976557, 0.600000, 0.355438), Vector3(-0.976557, 0.600000, -0.355438), Vector3(-0.519615, 0.600000, -0.900000), Vector3(0.180461, 0.600000, -1.023442), Vector3(0.796097, 0.600000, -0.668004), Vector3(1.039230, 0.600000, 0.000000), Vector3(0.771345, 0.919254, 0.000000), Vector3(0.590885, 0.919254, 0.495811), Vector3(0.133943, 0.919254, 0.759627), Vector3(-0.385673, 0.919254, 0.668004), Vector3(-0.724827, 0.919254, 0.263815), Vector3(-0.724827, 0.919254, -0.263816), Vector3(-0.385672, 0.919254, -0.668004), Vector3(0.133943, 0.919254, -0.759626), Vector3(0.590885, 0.919254, -0.495811), Vector3(0.771345, 0.919254, 0.000000), Vector3(0.410424, 1.127631, 0.000000), Vector3(0.314403, 1.127631, 0.263815), Vector3(0.071269, 1.127631, 0.404189), Vector3(-0.205212, 1.127631, 0.355438), Vector3(-0.385672, 1.127631, 0.140373), Vector3(-0.385672, 1.127631, -0.140373), Vector3(-0.205212, 1.127631, -0.355438), Vector3(0.071270, 1.127631, -0.404189), Vector3(0.314403, 1.127631, -0.263815), Vector3(0.410424, 1.127631, 0.000000), Vector3(-0.000000, 1.200000, -0.000000), Vector3(-0.000000, 1.200000, -0.000000), Vector3(-0.000000, 1.200000, -0.000000), Vector3(0.000000, 1.200000, -0.000000), Vector3(0.000000, 1.200000, -0.000000), Vector3(0.000000, 1.200000, 0.000000), Vector3(0.000000, 1.200000, 0.000000), Vector3(-0.000000, 1.200000, 0.000000), Vector3(-0.000000, 1.200000, 0.000000), Vector3(-0.000000, 1.200000, -0.000000),
		//	Vector3(0.000000, -1.400000, 0.000000), Vector3(0.478828, -1.315570, 0.000000), Vector3(0.366804, -1.315570, 0.307785), Vector3(0.083148, -1.315570, 0.471554), Vector3(-0.239414, -1.315570, 0.414677), Vector3(-0.449951, -1.315570, 0.163769), Vector3(-0.449951, -1.315570, -0.163769), Vector3(-0.239414, -1.315570, -0.414677), Vector3(0.083148, -1.315570, -0.471554), Vector3(0.366804, -1.315570, -0.307785), Vector3(0.478828, -1.315570, 0.000000), Vector3(0.899903, -1.072462, 0.000000), Vector3(0.689366, -1.072462, 0.578446), Vector3(0.156266, -1.072462, 0.886231), Vector3(-0.449951, -1.072462, 0.779339), Vector3(-0.845632, -1.072462, 0.307785), Vector3(-0.845632, -1.072462, -0.307785), Vector3(-0.449951, -1.072462, -0.779339), Vector3(0.156267, -1.072462, -0.886231), Vector3(0.689366, -1.072462, -0.578446), Vector3(0.899903, -1.072462, 0.000000), Vector3(1.212436, -0.700000, 0.000000), Vector3(0.928780, -0.700000, 0.779339), Vector3(0.210537, -0.700000, 1.194016), Vector3(-0.606218, -0.700000, 1.050000), Vector3(-1.139317, -0.700000, 0.414677), Vector3(-1.139317, -0.700000, -0.414678), Vector3(-0.606218, -0.700000, -1.050000), Vector3(0.210538, -0.700000, -1.194016), Vector3(0.928780, -0.700000, -0.779338), Vector3(1.212436, -0.700000, 0.000000), Vector3(1.378731, -0.243107, 0.000000), Vector3(1.056169, -0.243107, 0.886231), Vector3(0.239414, -0.243107, 1.357785), Vector3(-0.689366, -0.243107, 1.194016), Vector3(-1.295583, -0.243107, 0.471554), Vector3(-1.295583, -0.243107, -0.471554), Vector3(-0.689365, -0.243107, -1.194016), Vector3(0.239415, -0.243107, -1.357785), Vector3(1.056169, -0.243107, -0.886231), Vector3(1.378731, -0.243107, 0.000000), Vector3(1.378731, 0.243108, 0.000000), Vector3(1.056169, 0.243108, 0.886231), Vector3(0.239414, 0.243108, 1.357785), Vector3(-0.689366, 0.243108, 1.194016), Vector3(-1.295583, 0.243108, 0.471554), Vector3(-1.295583, 0.243108, -0.471554), Vector3(-0.689365, 0.243108, -1.194016), Vector3(0.239415, 0.243108, -1.357785), Vector3(1.056169, 0.243108, -0.886231), Vector3(1.378731, 0.243108, 0.000000), Vector3(1.212436, 0.700000, 0.000000), Vector3(0.928780, 0.700000, 0.779339), Vector3(0.210537, 0.700000, 1.194016), Vector3(-0.606218, 0.700000, 1.050000), Vector3(-1.139317, 0.700000, 0.414677), Vector3(-1.139317, 0.700000, -0.414678), Vector3(-0.606218, 0.700000, -1.050000), Vector3(0.210538, 0.700000, -1.194016), Vector3(0.928780, 0.700000, -0.779338), Vector3(1.212436, 0.700000, 0.000000), Vector3(0.899903, 1.072462, 0.000000), Vector3(0.689365, 1.072462, 0.578446), Vector3(0.156266, 1.072462, 0.886231), Vector3(-0.449951, 1.072462, 0.779338), Vector3(-0.845632, 1.072462, 0.307785), Vector3(-0.845632, 1.072462, -0.307785), Vector3(-0.449951, 1.072462, -0.779338), Vector3(0.156267, 1.072462, -0.886231), Vector3(0.689365, 1.072462, -0.578446), Vector3(0.899903, 1.072462, 0.000000), Vector3(0.478828, 1.315570, 0.000000), Vector3(0.366804, 1.315570, 0.307785), Vector3(0.083148, 1.315570, 0.471554), Vector3(-0.239414, 1.315570, 0.414677), Vector3(-0.449951, 1.315570, 0.163769), Vector3(-0.449951, 1.315570, -0.163769), Vector3(-0.239414, 1.315570, -0.414677), Vector3(0.083148, 1.315570, -0.471554), Vector3(0.366804, 1.315570, -0.307785), Vector3(0.478828, 1.315570, 0.000000), Vector3(-0.000000, 1.400000, -0.000000), Vector3(-0.000000, 1.400000, -0.000000), Vector3(-0.000000, 1.400000, -0.000000), Vector3(0.000000, 1.400000, -0.000000), Vector3(0.000000, 1.400000, -0.000000), Vector3(0.000000, 1.400000, 0.000000), Vector3(0.000000, 1.400000, 0.000000), Vector3(-0.000000, 1.400000, 0.000000), Vector3(-0.000000, 1.400000, 0.000000), Vector3(-0.000000, 1.400000, -0.000000),
		//	Vector3(0.000000, -1.600000, 0.000000), Vector3(0.547232, -1.503508, 0.000000), Vector3(0.419204, -1.503508, 0.351754), Vector3(0.095026, -1.503508, 0.538919), Vector3(-0.273616, -1.503508, 0.473917), Vector3(-0.514230, -1.503508, 0.187164), Vector3(-0.514230, -1.503508, -0.187165), Vector3(-0.273616, -1.503508, -0.473917), Vector3(0.095026, -1.503508, -0.538919), Vector3(0.419204, -1.503508, -0.351754), Vector3(0.547232, -1.503508, 0.000000), Vector3(1.028460, -1.225671, 0.000000), Vector3(0.787846, -1.225671, 0.661082), Vector3(0.178590, -1.225671, 1.012836), Vector3(-0.514230, -1.225671, 0.890673), Vector3(-0.966437, -1.225671, 0.351754), Vector3(-0.966436, -1.225671, -0.351754), Vector3(-0.514230, -1.225671, -0.890673), Vector3(0.178591, -1.225671, -1.012836), Vector3(0.787847, -1.225671, -0.661081), Vector3(1.028460, -1.225671, 0.000000), Vector3(1.385641, -0.800000, 0.000000), Vector3(1.061463, -0.800000, 0.890673), Vector3(0.240614, -0.800000, 1.364590), Vector3(-0.692820, -0.800000, 1.200000), Vector3(-1.302077, -0.800000, 0.473917), Vector3(-1.302076, -0.800000, -0.473917), Vector3(-0.692820, -0.800000, -1.200000), Vector3(0.240615, -0.800000, -1.364590), Vector3(1.061463, -0.800000, -0.890673), Vector3(1.385641, -0.800000, 0.000000), Vector3(1.575693, -0.277837, 0.000000), Vector3(1.207051, -0.277837, 1.012836), Vector3(0.273616, -0.277837, 1.551754), Vector3(-0.787846, -0.277837, 1.364590), Vector3(-1.480667, -0.277837, 0.538918), Vector3(-1.480667, -0.277837, -0.538919), Vector3(-0.787846, -0.277837, -1.364590), Vector3(0.273617, -0.277837, -1.551754), Vector3(1.207051, -0.277837, -1.012835), Vector3(1.575693, -0.277837, 0.000000), Vector3(1.575693, 0.277837, 0.000000), Vector3(1.207051, 0.277837, 1.012836), Vector3(0.273616, 0.277837, 1.551754), Vector3(-0.787846, 0.277837, 1.364590), Vector3(-1.480667, 0.277837, 0.538918), Vector3(-1.480667, 0.277837, -0.538919), Vector3(-0.787846, 0.277837, -1.364590), Vector3(0.273617, 0.277837, -1.551754), Vector3(1.207051, 0.277837, -1.012835), Vector3(1.575693, 0.277837, 0.000000), Vector3(1.385641, 0.800000, 0.000000), Vector3(1.061462, 0.800000, 0.890673), Vector3(0.240614, 0.800000, 1.364590), Vector3(-0.692820, 0.800000, 1.200000), Vector3(-1.302076, 0.800000, 0.473917), Vector3(-1.302076, 0.800000, -0.473917), Vector3(-0.692820, 0.800000, -1.200000), Vector3(0.240615, 0.800000, -1.364590), Vector3(1.061463, 0.800000, -0.890672), Vector3(1.385641, 0.800000, 0.000000), Vector3(1.028460, 1.225671, 0.000000), Vector3(0.787846, 1.225671, 0.661081), Vector3(0.178590, 1.225671, 1.012835), Vector3(-0.514230, 1.225671, 0.890673), Vector3(-0.966436, 1.225671, 0.351754), Vector3(-0.966436, 1.225671, -0.351754), Vector3(-0.514230, 1.225671, -0.890673), Vector3(0.178591, 1.225671, -1.012835), Vector3(0.787846, 1.225671, -0.661081), Vector3(1.028460, 1.225671, 0.000000), Vector3(0.547232, 1.503508, 0.000000), Vector3(0.419204, 1.503508, 0.351754), Vector3(0.095026, 1.503508, 0.538918), Vector3(-0.273616, 1.503508, 0.473917), Vector3(-0.514230, 1.503508, 0.187164), Vector3(-0.514230, 1.503508, -0.187165), Vector3(-0.273616, 1.503508, -0.473917), Vector3(0.095026, 1.503508, -0.538918), Vector3(0.419204, 1.503508, -0.351754), Vector3(0.547232, 1.503508, 0.000000), Vector3(-0.000000, 1.600000, -0.000000), Vector3(-0.000000, 1.600000, -0.000000), Vector3(-0.000000, 1.600000, -0.000000), Vector3(0.000000, 1.600000, -0.000000), Vector3(0.000000, 1.600000, -0.000000), Vector3(0.000000, 1.600000, 0.000000), Vector3(0.000000, 1.600000, 0.000000), Vector3(-0.000000, 1.600000, 0.000000), Vector3(-0.000000, 1.600000, 0.000000), Vector3(-0.000000, 1.600000, -0.000000),
		//	Vector3(0.000000, -1.800000, 0.000000), Vector3(0.615636, -1.691447, 0.000000), Vector3(0.471605, -1.691447, 0.395723), Vector3(0.106904, -1.691447, 0.606283), Vector3(-0.307818, -1.691447, 0.533157), Vector3(-0.578509, -1.691447, 0.210560), Vector3(-0.578509, -1.691447, -0.210560), Vector3(-0.307818, -1.691447, -0.533157), Vector3(0.106904, -1.691447, -0.606283), Vector3(0.471605, -1.691447, -0.395723), Vector3(0.615636, -1.691447, 0.000000), Vector3(1.157018, -1.378880, 0.000000), Vector3(0.886327, -1.378880, 0.743717), Vector3(0.200914, -1.378880, 1.139440), Vector3(-0.578509, -1.378880, 1.002007), Vector3(-1.087241, -1.378880, 0.395723), Vector3(-1.087241, -1.378880, -0.395724), Vector3(-0.578509, -1.378880, -1.002007), Vector3(0.200915, -1.378880, -1.139440), Vector3(0.886327, -1.378880, -0.743716), Vector3(1.157018, -1.378880, 0.000000), Vector3(1.558846, -0.900000, 0.000000), Vector3(1.194145, -0.900000, 1.002007), Vector3(0.270691, -0.900000, 1.535164), Vector3(-0.779423, -0.900000, 1.350000), Vector3(-1.464836, -0.900000, 0.533157), Vector3(-1.464836, -0.900000, -0.533157), Vector3(-0.779423, -0.900000, -1.350000), Vector3(0.270691, -0.900000, -1.535163), Vector3(1.194146, -0.900000, -1.002007), Vector3(1.558846, -0.900000, 0.000000), Vector3(1.772654, -0.312567, 0.000000), Vector3(1.357932, -0.312567, 1.139440), Vector3(0.307818, -0.312567, 1.745724), Vector3(-0.886327, -0.312567, 1.535164), Vector3(-1.665750, -0.312567, 0.606283), Vector3(-1.665750, -0.312567, -0.606284), Vector3(-0.886327, -0.312567, -1.535164), Vector3(0.307819, -0.312567, -1.745723), Vector3(1.357932, -0.312567, -1.139440), Vector3(1.772654, -0.312567, 0.000000), Vector3(1.772654, 0.312567, 0.000000), Vector3(1.357932, 0.312567, 1.139440), Vector3(0.307818, 0.312567, 1.745723), Vector3(-0.886327, 0.312567, 1.535163), Vector3(-1.665750, 0.312567, 0.606283), Vector3(-1.665750, 0.312567, -0.606284), Vector3(-0.886327, 0.312567, -1.535164), Vector3(0.307819, 0.312567, -1.745723), Vector3(1.357932, 0.312567, -1.139440), Vector3(1.772654, 0.312567, 0.000000), Vector3(1.558846, 0.900000, 0.000000), Vector3(1.194145, 0.900000, 1.002007), Vector3(0.270691, 0.900000, 1.535164), Vector3(-0.779423, 0.900000, 1.350000), Vector3(-1.464836, 0.900000, 0.533156), Vector3(-1.464836, 0.900000, -0.533157), Vector3(-0.779423, 0.900000, -1.350000), Vector3(0.270691, 0.900000, -1.535163), Vector3(1.194145, 0.900000, -1.002006), Vector3(1.558846, 0.900000, 0.000000), Vector3(1.157018, 1.378880, 0.000000), Vector3(0.886327, 1.378880, 0.743717), Vector3(0.200914, 1.378880, 1.139440), Vector3(-0.578509, 1.378880, 1.002007), Vector3(-1.087241, 1.378880, 0.395723), Vector3(-1.087241, 1.378880, -0.395724), Vector3(-0.578509, 1.378880, -1.002007), Vector3(0.200915, 1.378880, -1.139440), Vector3(0.886327, 1.378880, -0.743716), Vector3(1.157018, 1.378880, 0.000000), Vector3(0.615636, 1.691447, 0.000000), Vector3(0.471605, 1.691447, 0.395723), Vector3(0.106904, 1.691447, 0.606283), Vector3(-0.307818, 1.691447, 0.533156), Vector3(-0.578509, 1.691447, 0.210560), Vector3(-0.578509, 1.691447, -0.210560), Vector3(-0.307818, 1.691447, -0.533157), Vector3(0.106904, 1.691447, -0.606283), Vector3(0.471605, 1.691447, -0.395723), Vector3(0.615636, 1.691447, 0.000000), Vector3(-0.000000, 1.800000, -0.000000), Vector3(-0.000000, 1.800000, -0.000000), Vector3(-0.000000, 1.800000, -0.000000), Vector3(0.000000, 1.800000, -0.000000), Vector3(0.000000, 1.800000, -0.000000), Vector3(0.000000, 1.800000, 0.000000), Vector3(0.000000, 1.800000, 0.000000), Vector3(-0.000000, 1.800000, 0.000000), Vector3(-0.000000, 1.800000, 0.000000), Vector3(-0.000000, 1.800000, -0.000000),
		//	Vector3(0.000000, -2.000000, 0.000000), Vector3(0.684040, -1.879385, 0.000000), Vector3(0.524005, -1.879385, 0.439693), Vector3(0.118782, -1.879385, 0.673648), Vector3(-0.342020, -1.879385, 0.592396), Vector3(-0.642788, -1.879385, 0.233956), Vector3(-0.642788, -1.879385, -0.233956), Vector3(-0.342020, -1.879385, -0.592396), Vector3(0.118783, -1.879385, -0.673648), Vector3(0.524005, -1.879385, -0.439693), Vector3(0.684040, -1.879385, 0.000000), Vector3(1.285575, -1.532089, 0.000000), Vector3(0.984808, -1.532089, 0.826352), Vector3(0.223238, -1.532089, 1.266045), Vector3(-0.642788, -1.532089, 1.113341), Vector3(-1.208046, -1.532089, 0.439693), Vector3(-1.208046, -1.532089, -0.439693), Vector3(-0.642788, -1.532089, -1.113341), Vector3(0.223238, -1.532089, -1.266044), Vector3(0.984808, -1.532089, -0.826352), Vector3(1.285575, -1.532089, 0.000000), Vector3(1.732051, -1.000000, 0.000000), Vector3(1.326828, -1.000000, 1.113341), Vector3(0.300767, -1.000000, 1.705737), Vector3(-0.866026, -1.000000, 1.500000), Vector3(-1.627596, -1.000000, 0.592396), Vector3(-1.627596, -1.000000, -0.592397), Vector3(-0.866025, -1.000000, -1.500000), Vector3(0.300768, -1.000000, -1.705737), Vector3(1.326828, -1.000000, -1.113341), Vector3(1.732051, -1.000000, 0.000000), Vector3(1.969616, -0.347296, 0.000000), Vector3(1.508813, -0.347296, 1.266045), Vector3(0.342020, -0.347296, 1.939693), Vector3(-0.984808, -0.347296, 1.705737), Vector3(-1.850834, -0.347296, 0.673648), Vector3(-1.850833, -0.347296, -0.673649), Vector3(-0.984808, -0.347296, -1.705737), Vector3(0.342021, -0.347296, -1.939693), Vector3(1.508814, -0.347296, -1.266044), Vector3(1.969616, -0.347296, 0.000000), Vector3(1.969616, 0.347297, 0.000000), Vector3(1.508813, 0.347297, 1.266045), Vector3(0.342020, 0.347297, 1.939693), Vector3(-0.984808, 0.347297, 1.705737), Vector3(-1.850833, 0.347297, 0.673648), Vector3(-1.850833, 0.347297, -0.673649), Vector3(-0.984808, 0.347297, -1.705737), Vector3(0.342021, 0.347297, -1.939693), Vector3(1.508814, 0.347297, -1.266044), Vector3(1.969616, 0.347297, 0.000000), Vector3(1.732051, 1.000000, 0.000000), Vector3(1.326828, 1.000000, 1.113341), Vector3(0.300767, 1.000000, 1.705737), Vector3(-0.866026, 1.000000, 1.500000), Vector3(-1.627596, 1.000000, 0.592396), Vector3(-1.627595, 1.000000, -0.592397), Vector3(-0.866025, 1.000000, -1.500000), Vector3(0.300768, 1.000000, -1.705737), Vector3(1.326828, 1.000000, -1.113340), Vector3(1.732051, 1.000000, 0.000000), Vector3(1.285575, 1.532089, 0.000000), Vector3(0.984808, 1.532089, 0.826352), Vector3(0.223238, 1.532089, 1.266044), Vector3(-0.642788, 1.532089, 1.113341), Vector3(-1.208045, 1.532089, 0.439692), Vector3(-1.208045, 1.532089, -0.439693), Vector3(-0.642787, 1.532089, -1.113341), Vector3(0.223238, 1.532089, -1.266044), Vector3(0.984808, 1.532089, -0.826351), Vector3(1.285575, 1.532089, 0.000000), Vector3(0.684040, 1.879386, 0.000000), Vector3(0.524005, 1.879386, 0.439693), Vector3(0.118782, 1.879386, 0.673648), Vector3(-0.342020, 1.879386, 0.592396), Vector3(-0.642787, 1.879386, 0.233955), Vector3(-0.642787, 1.879386, -0.233956), Vector3(-0.342020, 1.879386, -0.592396), Vector3(0.118783, 1.879386, -0.673648), Vector3(0.524005, 1.879386, -0.439692), Vector3(0.684040, 1.879386, 0.000000), Vector3(-0.000000, 2.000000, -0.000000), Vector3(-0.000000, 2.000000, -0.000000), Vector3(-0.000000, 2.000000, -0.000000), Vector3(0.000000, 2.000000, -0.000000), Vector3(0.000000, 2.000000, -0.000000), Vector3(0.000000, 2.000000, 0.000000), Vector3(0.000000, 2.000000, 0.000000), Vector3(-0.000000, 2.000000, 0.000000), Vector3(-0.000000, 2.000000, 0.000000), Vector3(-0.000000, 2.000000, -0.000000) };

		std::array<Vector3, 41> arr = {
				Vector3(0.f, (v_mm_max_eye / 5), 0.f), // small up

				Vector3(0.f, v_mm_max_eye / 2, 0.f), // medium up

				Vector3(0.f, v_mm_max_eye, 0.f), // big up

				Vector3(0.f, -(1.4f / 2), 0.f), // small down

				Vector3(0.f, -1.4f, 0.f), // big down

				Vector3(right.x * (mm_max_eye / 2), 0.f, right.z * (mm_max_eye / 2)), // small right

				Vector3(right.x * mm_max_eye, 0.f, right.z * mm_max_eye), // big right

				Vector3(right.x * (mm_max_eye / 2), (1.4f / 2), right.z * (mm_max_eye / 2)), // small right up

				Vector3(right.x * mm_max_eye, 1.4f, right.z * mm_max_eye), // big right up

				Vector3(right.x * (mm_max_eye / 2), -(1.4f / 2), right.z * (4.f / 2)), // small right down

				Vector3(right.x * mm_max_eye, -1.4f, right.z * mm_max_eye), // big right down

				Vector3(-(right.x * (mm_max_eye / 2)), 0.f, -(right.z * (mm_max_eye / 2))), // small left

				Vector3(-(right.x * mm_max_eye), 0.f, -(right.z * mm_max_eye)), // big left

				Vector3(-(right.x * (mm_max_eye / 2)), (1.4f / 2), -(right.z * (mm_max_eye / 2))), // small left up

				Vector3(-(right.x * mm_max_eye), 1.4f, -(right.z * mm_max_eye)), // big left up

				Vector3(-(right.x * (mm_max_eye / 2)), -(1.4f / 2), -(right.z * (mm_max_eye / 2))), // small left down

				Vector3(-(right.x * mm_max_eye), -1.4f, -(right.z * mm_max_eye)), // big left down 

				Vector3(forward.x * (mm_max_eye / 2), 0.f, forward.z * (mm_max_eye / 2)),// small forward

				Vector3(forward.x * mm_max_eye, 0.f, forward.z * mm_max_eye), // big forward

				Vector3(-(forward.x * (mm_max_eye / 2)), 0.f, -(forward.z * (mm_max_eye / 2))), // small backward

				Vector3(-(forward.x * mm_max_eye), 0.f, -(forward.z * mm_max_eye)), // big backward

				Vector3(forward.x * (mm_max_eye / 2), (1.4f / 2), forward.z * (mm_max_eye / 2)),// small forward up

				Vector3(forward.x * mm_max_eye, 1.4f, forward.z * mm_max_eye), // big forward up // 1.4F
				

				Vector3(forward.x * (mm_max_eye / 2), -(1.4f / 2), forward.z * (mm_max_eye / 2)),// small forward down

				Vector3(forward.x * mm_max_eye, -1.4f, forward.z * mm_max_eye), // big forward down

				Vector3(-(forward.x * (mm_max_eye / 2)), 0.f, -(forward.z * (mm_max_eye / 2))),// small reverse

				Vector3(-(forward.x * mm_max_eye), 0.f, -(forward.z * mm_max_eye)), // big reverse 

				Vector3(-(forward.x * (mm_max_eye / 2)), (1.4f / 2), -(forward.z * (mm_max_eye / 2))),// small reverse up

				Vector3(-(forward.x * 4.f), 1.4f, -(forward.z * 4.f)), // big reverse up

				Vector3(-(forward.x * (mm_max_eye / 2)), -(1.4f / 2), -(forward.z * (mm_max_eye / 2))),// small reverse down

				Vector3(-(forward.x * mm_max_eye), -1.4f, -(forward.z * mm_max_eye)), // big reverse down

				Vector3(right.x * mm_max_eye, v_mm_max_eye, right.z * (mm_max_eye)) * 0.9f, // big diag-up-right

				Vector3(-right.x * (mm_max_eye), (v_mm_max_eye), -right.z * (mm_max_eye)) * 0.9f, // big diag-up-left

				Vector3(right.x * mm_max_eye, -v_mm_max_eye, right.z * (mm_max_eye)) * 0.9f, // big diag-down-right

				Vector3(-right.x * (mm_max_eye), (-v_mm_max_eye), -right.z * (mm_max_eye)) * 0.9f, // big diag-up-left

				Vector3((right.x / 2) * mm_max_eye, v_mm_max_eye, (right.z / 2) * (mm_max_eye)), // big diag-up-right

				Vector3(-(right.x / 2) * (mm_max_eye), (v_mm_max_eye), -(right.z / 2) * (mm_max_eye)), // big diag-up-left

				Vector3((right.x / 2) * mm_max_eye, -v_mm_max_eye, (right.z / 2) * (mm_max_eye)), // big diag-down-right

				Vector3(-(right.x / 2) * (mm_max_eye), (-v_mm_max_eye), -(right.z / 2) * (mm_max_eye)), // big diag-up-left

				Vector3((forward.x / 2) * (mm_max_eye / 2), (v_mm_max_eye / 1), (forward.z / 2) * (mm_max_eye / 2)), // big diag-up-forward

				Vector3(-((forward.x / 2) * (mm_max_eye / 2)), (v_mm_max_eye / 1), -((forward.z / 2) * mm_max_eye / 2)), // big diag-up-backward
		};
		for (auto s : arr) {
			Vector3 point = re_p + s;

			if (!utils::LineOfSight(point, re_p))
				continue;

			if (vars::combat::manipulate_angle) {
			//	DDraw::Box(point, 0.05f, Color(0, 136, 255, 1), 0.05f, 10);
				Quaternion q;
				DDraw::Capsule(point, q,  0.1f, 2 * 0.1f, Color(0, 163, 255, 255), 0.01f, false);
				//DDraw::Sphere(point, 0.05f, Color(0, 136, 255, 1), 0.05f, 3);
			//	DDraw::Line(re_p, point, Color(0, 136, 255, 255), 0.02f, false, true);
			//	DDraw::Line(re_p, point, Color(0, 136, 255, 1), 0.02f, false);
				//DDraw::Sphere(point, 0.05f, Color(vars::colors::angle.x, vars::colors::angle.y, vars::colors::angle.z, 1.f), 0.05f, 3);
			}
			//if (vars::combat::manipulate_angle_arrow) {

			//	DDraw::Arrow(re_p, LocalPlayer::Entity()->eyes()->position(), 0.7f, Color(vars::colors::angle_arrow.x, vars::colors::angle_arrow.y, vars::colors::angle_arrow.z, 1.f), 0.01f);
			//}
			
			if (!utils::LineOfSight(reinterpret_cast<BasePlayer*>(vars::stor::closestPlayer)->GetBoneByID(head), point))
				continue;

			choice = s;
			break;
		}
		if (choice.empty()) {
			m_manipulate = Vector3::Zero();
			return;
		}

		m_manipulate = choice;
	}
}